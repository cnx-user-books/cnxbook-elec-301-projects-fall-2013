<document xmlns="http://cnx.rice.edu/cnxml">

<title>Background</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m48330</md:content-id>
  <md:title>Background</md:title>
  <md:abstract/>
  <md:uuid>add31c18-ccf6-4c5a-9c1c-633573d007a7</md:uuid>
</metadata>

<content>
  <section id="eip-342"><title>Apogee is Important</title><para id="eip-74">Why is apogee important in model rockets? Apogee is pivotal in the timing of the deployment of the parachute which allows the rocket to find its way to the ground safely, without damaging the rocket or the devices inside it. Timely parachute deployment from apogee ensures that the parachute will not tear mid-flight, so the rocket will be easier to track by eye on its way to the ground; this way fewer rockets will be lost on their way down from a flight.
Late or early parachute deployment results in net forces acting against the parachute (in addition to the force of gravity it already has to act against) in flight, causing a larger strain on the parachute and rocket frame. In relation to the rocket apogee, a one second difference in the deployment of a parachute translates roughly to a change in 32 feet/second in velocity. While it is possible to create rockets and even possibly parachutes that can withstand theses forces, it is ideal to minimize these stresses wherever possible. These extra forces can cause rips and tears to less hardy parachutes or damage to the rocket frame, causing the rocket to plummet downwards rather than parachuting slowly down. Without optimal parachute deployment, the recovery stage of the rocket’s flight will fail. Exploring rocket apogee detection methods, and in particular the use of the Kalman filter in rocket apogee detection, helps optimize performance while minimizing costs and disadvantages. 

</para></section><section id="eip-741"><title>Current Mechanical Methods</title><para id="eip-407">Current methods used to deploy the parachute are completely mechanical and are not completely electronic.  The most often used method as well as the most primitive method of deploying the parachute is to make use of a second ignition to push the components of the rocket out and towards the nosecone. The maker of the model rocket will usually drill a hole into a tube, and pack a certain amount of charge powder (the amount depending on the length and area of the hole). After the thrust and consequent burnout of the rocket engine, the last of the burnout sets a second ignition that blasts the charge up the body tube towards the nosecone. The force of the blast splits the rocket and sends the parachute components out into the air to catch wind resistance.  The recovery wadding (Figure 1) must be placed in order to protect the parachute from the explosive charge.  As seen in Figure 3, the whole system relies on the original ignition to relay through the electrical leads to the ignition charge.

<figure id="figure-03"><title>Components of Parachute Ejection System</title><media id="parachutedeployment" alt="deployment system diagram">
      <image mime-type="image/gif" src="../../media/parachute_deployment.gif"/>
   </media>
   
<caption>A diagram depicting an example of a non-electronic parachute deployment system. From: http://www.nakka-rocketry.net/parasys.html</caption></figure></para><para id="eip-576">This method, rather than rely on any sort of data, relies on the pre-computed estimates of apogee and when it happens. The length of the tube that sends the ignition charge can only be adjusted in steps of about two seconds. Those two seconds could end up being the difference between late deployment or early deployment, and on-time deployment. In addition to the large source of error introduced by the lack of precision of the apogee-predicting parachute fuse, it can be difficult to pre-calculate the timing of apogee. Without relying on any real-time rocket data, this non-electronic method of parachute deployment is can be unreliable. Accurate digital detection of apogee, is therefore key to an electronic method of parachute deployment.
</para></section><section id="eip-935"><title>Using the Accelerometer and Barometer </title><para id="eip-451">Sensors are used to estimate the rocket's state during flight. In order to take real time data, a microcontroller with both an accelerometer and a barometer are put inside the rocket payload section. A method for apogee detection using only an accelerometer (an "inertial system") is to detect apogee when the velocity, area under the acceleration curve, reaches zero. The acceleration of the rocket steadily increases due to the thrust, reaches a peak, and drops down to a constant -9.8 m/s2 after burn out (since the only force working on the rocket at that point is the downward force of gravity). Therefore, in a perfect world where the acceleration and the accelerometer match, the accelerometer would integrate in real time to find the velocity, and as soon as the velocity reached zero, it would deploy the parachute. However, accelerometers, in general, are far from perfect. The accelerometer data is quantized and noisy. More problematically, the accelerometer contains a bias. This makes integrating the data troublesome, as error from the bias increases constantly over time. This causes enough error to deploy the parachute seconds earlier or seconds later than apogee. </para><para id="eip-778">Another approach to electronic apogee detection comes from a barometer. The barometer measures air pressure and detects changes in air pressure in order to determine the height of the rocket. Apogee is detected when the air pressure stops decreasing, and begins to increase. With the barometer is that the data will be quantized. How quantized the data is depends on the sensitivity of the barometer, but are in general significant because the barometer detects changes in air pressure which are small for a comparatively large change in altitude. However, the presence of a bias term is irrelevant when computing apogee from a barometer because it is the change in altitude that determines apogee, not the absolute altitude. The barometer, in theory, can detect when apogee is by looking at the past terms and determining if the altitude is higher, lower, or about the same as the current height. Consider the half parabolic flight pattern in Figure 2. When the rocket is in thrust phase, the barometer will read that the current height is higher than the previous heights. Near the very end of the coasting, as the barometer starts to read values that are incredibly close to each other, the program may use a decision rule to deploy the parachute here. Alternatively, it can deploy as soon as it starts seeing a decrease in altitude. Of course, without digital filtering, apogee is impossible to detect; there is too much noise and quantization error. In addition, because barometers measure air pressure, the pressure wave produced when the rocket nears the speed of sound may be registered as a drop in altitude and therefore apogee. Barometers, like accelerometers are easily fooled. The noise caused in the data alone could cause the parachute to deploy anytime the data dipped below a past value, even if the model rocket is in thrust phase. 
</para></section><section id="eip-42"><title>Conventional Filters are Inadequate</title><para id="eip-971">After taking in raw flight data, the next attempt to accurately extract the apogee is to filter it in order to obtain a signal that can be used to best approximate apogee. First is the naïve low pass filter approach.  As seen in Figure 4, the boxcar filter was able to smooth out the noisy raw data to create a semi-parabolic flight pattern similar to the expected flight pattern. However, the fatal flaw of the boxcar filter is that, while it filters the signal reasonably, it creates a time delay. In this graph, the apogee occurs at around 10-11 seconds into the flight. However, the output to the boxcar filter puts apogee at around 11-12 seconds into the flight.  Knowing how crucial a few seconds is in real time flight, the boxcar tragically falls short of the expectations.

<figure id="figure-04">
   <title>Boxcar Filter</title>
   <media id="boxcar" alt="data filtered through boxcar">
      <image mime-type="image/png" src="../../media/boxcar.png"/>
   </media>
   <caption>Graph of Raw Barometer Data vs. Filtered Data – Boxcar Filter</caption>
</figure> 

The first conclusion is that a simple boxcar filter has not worked for the purpose of accurately detecting the time of apogee. Perhaps other filters may work. Figure 5 and Figure 6 depict the same set of raw altitude data filtered by the butterworth and elliptical filters, respectively.  
On further inspection of the graph of the butterworth filtered data, it might be noted that the Butterworth filter has also created a time delay. Not only that, but this filter has created peaks and troughs (waves, ripples) in the filtered data. Although the time delay has been decreased slightly from the boxcar filter, it fails to smooth out the noisy signal. Unfortunately, if this filter were to be implemented, the system would detect apogee at the first decrease in altitude, which occurs around the 8.5 second mark.

<figure id="figure-05">
   <title>Butterworth Filter</title>
   <media id="butterworth" alt="data filtered through butterworth">
      <image mime-type="image/png" src="../../media/butterworth.png"/>
   </media>
   <caption>Graph of Raw Barometer Data vs. Filtered Data – Butterworth Filter</caption>
</figure> 

Unfortunately, the butterworth filter did not meet the criteria for accurate rocket apogee detection.  One last conventional filter, the lowpass elliptic filter, might work. Figure 6 below is a graph of the raw and elliptically filtered altitude data.  The elliptic lowpass filter, based on its rough outline, lines up well with the data. The global maximum of the elliptic filter does indeed seem to coincide with the apogee of the rocket (as extrapolated roughly by eye from the raw data). It seems to have overcome the time delay problem. However, the elliptic filter shares its flaw with the butterworth filter; it contains peaks and troughs that the system could easily confuse as apogee. The filtered data has very distinct local maxima and minima, resulting in the same problem as the butterworth filter; the system will deploy the parachute much too early, because it makes a decision rule at the very first decrease in altitude to release the parachute. In addition, the filtered data is attenuated, and while – in this case – bears no consequence to detecting the time of apogee, causes flaws in the actual altitude data.


<figure id="figure-06">
   <title>Elliptic Filter</title>
   <media id="elliptic" alt="data filtered through elliptic">
      <image mime-type="image/png" src="../../media/elliptic.png"/>
   </media>
   <caption>Graph of Raw Barometer Data vs. Filtered Data – Elliptic Filter</caption>
</figure> 

</para></section><section id="eip-62"><title>Why The Kalman Filter?</title><para id="eip-327">The Kalman filter is a filter that takes into consideration several factors that the other filters fail to. The Kalman filter is ideal when the situation involves a physical system along with real-time information gathering from noisy sensors. Model rocket flight can approximated from a fairly simple physical model which makes this problem well suited for a Kalman filter. While conventional filters do take into consideration past events in order to process current events, the Kalman filter utilizes the physical model of the rocket (which can be extrapolated from basic physics equations) as well as the previous state in order to process current events. One major advantage of the Kalman filter is that it only uses the previous state and the sensor data to predict the next state, unlike a running average which use many previous samples. Finally, the Kalman filter takes into account the reliability of the sensors (as determined by their variances and covariances) when making the state estimate, and is provably mathematically optimal when the model is accurate, and the sensor data is being corrupted by white noise.</para></section><para id="delete_me">
     <!-- Insert module text here -->
  </para>
</content>

</document>